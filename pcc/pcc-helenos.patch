--- pcc-1.0.0/configure	2017-08-02 12:34:28.061165186 +0200
+++ pcc-1.0.0/configure	2011-04-01 15:58:31.000000000 +0200
@@ -2085,6 +2085,8 @@
 	;;
 esac
 
+targos=helenos
+
 if test "X$targos" = X -o "X$targmach" = X ; then
 	{ { echo "$as_me:$LINENO: error: '$target' is not (yet) supported by pcc." >&5
 echo "$as_me: error: '$target' is not (yet) supported by pcc." >&2;}
--- pcc-1.0.0/cc/cc/cc.c	2011-03-15 20:25:36.000000000 +0100
+++ pcc-1.0.0/cc/cc/cc.c	2013-09-11 19:46:33.156788000 +0200
@@ -1143,6 +1149,11 @@
 				}
 			}
 		}
+#ifdef __helenos__
+		av[j++] = "-T";
+		av[j++] = "/inc/_link.ld";
+#endif
+		
 		av[j++] = 0;
 		eflag |= callsys(ld, av);
 		if (nc==1 && nxo==1 && eflag==0)
@@ -1326,6 +1337,63 @@
 	return (exitCode != 0);
 }
 
+#elif defined(__helenos__)
+#define _HELENOS_SOURCE
+#include <libc/task.h>
+
+int callsys(char *f, char *v[])
+{
+	size_t len;
+	char *path = NULL;
+	const char *s;
+	int t;
+	task_wait_t twait;
+	task_exit_t texit;
+	int retval;
+	
+	task_id_t tid;
+	
+	if (vflag) {
+		fprintf(stderr, "%s ", f);
+		for (t = 1; v[t]; t++)
+			fprintf(stderr, "%s ", v[t]);
+		fprintf(stderr, "\n");
+	}
+	
+	if (Bflag) {
+		len = strlen (Bflag) + 8;
+		path = malloc (len);
+		if (path == NULL) {
+			error("callsys: malloc failed");
+			exit(1);
+		}
+		if ((s = strrchr(f, '/'))) {
+			strlcpy(path, Bflag, len);
+			strlcat(path, s, len);
+			if (task_spawnv(&tid, &twait, path, v) == 0)
+				goto _wait;
+		}
+	}
+	
+	if (task_spawnv(&tid, &twait, f, v) == 0)
+		goto _wait;
+	
+	if ((s = strrchr(f, '/')) && task_spawnv(&tid, &twait, s + 1, v) == 0)
+		goto _wait;
+	
+	errorx(8, "Can't find %s\n", f);
+	return 0;
+	
+_wait:
+	
+	if (task_wait(&twait, &texit, &retval) != 0) {
+		error("Couldn't wait on task");
+		return 0;
+	}
+	
+	return retval;
+}
+
 #else
 
 int
diff -ur --unidirectional-new-file pcc-1.0.0/cc/ccom/main.c pcc/cc/ccom/main.c
--- pcc-1.0.0/cc/ccom/main.c	2011-01-22 23:08:23.000000000 +0100
+++ pcc-1.0.0/cc/ccom/main.c	2013-09-11 19:46:33.156788000 +0200
@@ -299,6 +299,9 @@
 				perror(NULL);
 				exit(1);
 			}
+		} else {
+			fprintf(stderr, "Reading from standard input is disabled on HelenOS\n");
+			exit(1);
 		}
 		if (argc > 1 && strcmp(argv[1], "-") != 0) {
 			if (freopen(argv[1], "w", stdout) == NULL) {
@@ -310,7 +313,9 @@
 		}
 
 	mkdope();
+#ifndef __helenos__
 	signal(SIGSEGV, segvcatch);
+#endif
 #ifdef SIGBUS
 	signal(SIGBUS, segvcatch);
 #endif
--- pcc-1.0.0/cc/ccom/pftn.c	2011-02-20 11:19:07.000000000 +0100
+++ pcc-1.0.0/cc/ccom/pftn.c	2013-09-11 19:46:33.156788000 +0200
@@ -1139,6 +1139,12 @@
 		}
 
 	ap = attr_find(apl, ATTR_BASETYP);
+	
+	if (ap == NULL) {
+		cerror("unknown type");
+		return SZINT;
+	}
+	
 	sz = ap->atypsz;
 	
 #ifdef GCC_COMPAT
--- pcc-1.0.0/cc/cpp/cpp.c	2011-03-27 15:17:19.000000000 +0200
+++ pcc-1.0.0/cc/cpp/cpp.c	2013-09-11 19:46:33.156788000 +0200
@@ -274,7 +274,7 @@
 		if ((ofd = open(argv[1], O_WRONLY|O_CREAT, 0600)) < 0)
 			error("Can't creat %s", argv[1]);
 	} else
-		ofd = 1; /* stdout */
+		ofd = fileno(stdout);
 	istty = isatty(ofd);
 
 	if (argc && strcmp(argv[0], "-")) {
@@ -402,7 +402,7 @@
 	struct symtab *nl;
 	usch *osp;
 	usch *fn, *safefn;
-	int c, it;
+	int c;
 
 	if (flslvl)
 		return;
@@ -436,7 +436,7 @@
 			;
 		if (c != '\n')
 			goto bad;
-		it = SYSINC;
+		(void) SYSINC;
 		safefn = fn;
 	} else {
 		usch *nm = stringbuf;
@@ -869,7 +869,6 @@
 {
 	usch *t;
 	usch *sb = stringbuf;
-	int dummy;
 
 	flbuf();
 	savch(0);
@@ -877,8 +876,8 @@
 		t = sheap("%s:%d: warning: ", ifiles->fname, ifiles->lineno);
 		write (2, t, strlen((char *)t));
 	}
-	dummy = write (2, s, strlen((char *)s));
-	dummy = write (2, "\n", 1);
+	write (2, s, strlen((char *)s));
+	write (2, "\n", 1);
 	stringbuf = sb;
 }
 
@@ -886,16 +885,15 @@
 xerror(usch *s)
 {
 	usch *t;
-	int dummy;
 
 	flbuf();
 	savch(0);
 	if (ifiles != NULL) {
 		t = sheap("%s:%d: error: ", ifiles->fname, ifiles->lineno);
-		dummy = write (2, t, strlen((char *)t));
+		write (2, t, strlen((char *)t));
 	}
-	dummy = write (2, s, strlen((char *)s));
-	dummy = write (2, "\n", 1);
+	write (2, s, strlen((char *)s));
+	write (2, "\n", 1);
 	exit(1);
 }
 
@@ -1709,12 +1707,27 @@
 	}
 }
 
+static ssize_t
+_write_all(int fd, const void* buffer, size_t count)
+{
+	size_t remaining = count;
+	while (remaining > 0) {
+		ssize_t retval = write(ofd, buffer, remaining);
+		if (retval < 0) {
+			return retval;
+		}
+		remaining -= retval;
+		buffer += retval;
+	}
+	return count;
+}
+
 void
 flbuf()
 {
 	if (obufp == 0)
 		return;
-	if (Mflag == 0 && write(ofd, outbuf, obufp) < 0)
+	if (Mflag == 0 && _write_all(ofd, outbuf, obufp) < 0)
 		error("obuf write error");
 	lastoch = outbuf[obufp-1];
 	obufp = 0;
@@ -1862,7 +1875,7 @@
 	struct symtab *sp;
 	struct tree *w, *new, *last;
 	int len, cix, bit, fbit, svbit, ix, bitno;
-	const usch *k, *m, *sm;
+	const usch *k, *m;
 
 	/* Count full string length */
 	for (k = key, len = 0; *k; k++, len++)
@@ -1897,7 +1910,7 @@
 
 	sp = (struct symtab *)w;
 
-	sm = m = sp->namep;
+	m = sp->namep;
 	k = key;
 
 	/* Check for correct string and return */
--- pcc-1.0.0/cc/cpp/token.c	2011-03-12 18:08:26.000000000 +0100
+++ pcc-1.0.0/cc/cpp/token.c	2013-09-11 19:46:33.156788000 +0200
@@ -182,7 +182,7 @@
 fastscan(void)
 {
 	struct symtab *nl;
-	int ch, i, ccnt, onemore;
+	int ch, i, ccnt;
 	usch *cp;
 
 	goto run;
@@ -356,7 +356,7 @@
 					ch = NXTCH();
 				goto xloop;
 			}
-			onemore = i = ccnt = 0;
+			i = ccnt = 0;
 			do {
 				yytext[i++] = (usch)ch;
 				ch = NXTCH();
@@ -799,7 +799,8 @@
 		if (++inclevel > MAX_INCLEVEL)
 			error("Limit for nested includes exceeded");
 	} else {
-		ic->infil = 0;
+		error("Reading from stdin is disabled on HelenOS.");
+		ic->infil = fileno(stdin);
 		ic->orgfn = ic->fname = (const usch *)"<stdin>";
 	}
 #ifndef BUF_STACK
